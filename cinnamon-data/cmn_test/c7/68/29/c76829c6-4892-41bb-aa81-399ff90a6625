<?xml version="1.0" encoding="UTF-8"?>
<project name="Cinnamon">
<!--
	Ant build script to build the cinnamon server using distributed libs.
	Place this script in the parent directory of Server/.
	Or run it with eclipse and supply the parameter 
	Base direcotry == ${workspace_loc:/}
-->
	<name>Oranges Bananas Pears</name><!-- for IndexItemTest -->
	<description>
		build file for the Cinnamon server: Postgresql-Version
	</description>

	<!-- properties -->
	<property name="app.name" value="cinnamon"/>
	<property name="deploy.dir" value="/var/lib/tomcat6/webapps"/>


	<property name="lib.home" value="/home/ingo/java_libs"/>
	<property name="hibernate.home" value="${lib.home}/hibernate-distribution-3.3.1.GA"/>
	<property name="hibernate.lib" value="${hibernate.home}/lib"/>
	<property name="hibernate.lib.required" value="${hibernate.lib}/required"/>
	<property name="hibernate.lib.optional" value="${hibernate.lib}/optional"/>
	<property name="hibernate.annotations.home" value="${lib.home}/hibernate-annotations-3.4.0.GA"/>
	<property name="hibernate.annotations.lib" value="${hibernate.annotations.home}/lib"/>
	<property name="hibernate.entitymanager.home" value="${lib.home}/hibernate-entitymanager-3.4.0.GA"/>
	<property name="eclipse.plugins" value="/home/ingo/eclipse/plugins"/>
	<property name="catalina.home" value="/var/lib/tomcat6"/> 
	<property name="servlet_api.home" value="/usr/share/tomcat6/lib" />
	<property name="lib.servlet_api" value="${servlet_api.home}/servlet-api.jar"/>
		
	<property name="lib.testng.home" value="${lib.home}/testng-5.8"/>
	<property name="lib.testng" value="${lib.testng.home}/testng-5.8-jdk15.jar"/>
    <property name="lib.commons.collections" value="${lib.home}/commons-collections-3.2.1/commons-collections-3.2.1.jar"/>
	<property name="lib.commons.httpclient.home" value="${lib.home}/commons-httpclient-3.1"/>
	<property name="lib.commons.httpclient" value="${lib.commons.httpclient.home}/commons-httpclient-3.1.jar"/>
	<property name="lib.commons.fileupload.path" value="${lib.home}/commons-fileupload-1.2.1/lib"/>
	<property name="lib.commons.fileupload" value="${lib.commons.fileupload.path}/commons-fileupload-1.2.1.jar"/>
	<property name="lib.commons.logging.home" value="${lib.home}/commons-logging-1.1"/>
	<property name="lib.commons.logging" value="${lib.commons.logging.home}/commons-logging-1.1.jar"/>
	<property name="lib.commons.logging.api" value="${lib.commons.logging.home}/commons-logging-api-1.1.jar"/>		
  	<property name="lib.commons.io.home" value="${lib.home}/commons-io-1.4"/>
  	<property name="lib.commons.io" value="${lib.commons.io.home}/commons-io-1.4.jar"/>
	<property name="lib.commons.codec" value="${lib.home}/commons-codec-1.3.jar"/>
		
	<property name="lib.slf4j" value="${lib.home}/slf4j-1.5.6"/>
	<property name="lib.slf4j.api" value="${lib.slf4j}/slf4j-api-1.5.6.jar"/>
	<property name="lib.logback" value="${lib.home}/logback-0.9.14"/>
	<property name="lib.logback.core" value="${lib.logback}/logback-core-0.9.14.jar"/>
	<property name="lib.logback.classic" value="${lib.logback}/logback-classic-0.9.14.jar"/>
	<property name="lib.dom4j.home" value="${lib.home}/dom4j-1.6.1"/>
	<property name="lib.dom4j" value="${lib.dom4j.home}/dom4j-1.6.1.jar"/>
	<property name="lib.jaxen" value="${lib.dom4j.home}/lib/jaxen-1.1-beta-6.jar"/>
	<property name="lib.xstream.home" value="${lib.home}/xstream-1.3.1"/>
	<property name="lib.xpp3" value="${lib.xstream.home}/lib/xpp3_min-1.1.4c.jar"/>
	<property name="lib.xstream" value="${lib.xstream.home}/lib/xstream-1.3.1.jar"/>
	<property name="lib.c3p0" value="${lib.home}/c3p0-0.9.1.2/lib/c3p0-0.9.1.2.jar"/>
	<property name="lib.postgres" value="/usr/share/tomcat6/lib/postgresql-8.3-604.jdbc4.jar"/>
	<property name="lib.xmlunit" value="${lib.home}/xmlunit-1.2/lib/xmlunit-1.2.jar"/>
	<property name="lib.lucene.home" value="${lib.home}/lucene-2.4.1"/>
	<property name="lib.lucene" value="${lib.lucene.home}/lucene-core-2.4.1.jar"/>
	<property name="lib.lucene.xmlquery" value="${lib.lucene.home}/contrib/xml-query-parser/lucene-xml-query-parser-2.4.1.jar"/>
		
	<property name="compile.debug" value="true"/>
	<path id="compile.classpath">
		<pathelement location="${hibernate.home}/hibernate3.jar"/>
		<fileset dir="${hibernate.lib.required}" includes="*.jar"/>
		<pathelement location="${hibernate.annotations.lib}/ejb3-persistence.jar"/>
		<pathelement location="${hibernate.annotations.home}/hibernate-annotations.jar"/>
		<pathelement location="${lib.servlet_api}"/>
		<pathelement location="${lib.testng}"/>
		<pathelement location="${lib.commons.httpclient}"/>
		<pathelement location="${lib.slf4j}/slf4j-api-1.5.6.jar"/>
		<fileset dir="${lib.logback}" includes="logback-c*.jar"/>
		<pathelement location="${lib.dom4j}"/>
		<pathelement location="${lib.xstream}"/>
		<pathelement location="${lib.xpp3}"/>
		<pathelement location="${lib.xmlunit}"/>
		<pathelement location="${lib.lucene}"/>
		<pathelement location="${lib.lucene.xmlquery}"/>
	</path>	

	<property name="safran.home" value="CinnamonClient"/>
	<property name="safran.src" value="${safran.home}/src"/>
	<property name="safran.build" value="${safran.home}/build"/>
	<property name="safran.build.classes" value="${safran.build}/classes"/>
	<property name="safran.jar" value="${safran.home}/safran.jar"/>		
		
	<property name="utils.home" value="CinnamonUtils"/>
	<property name="utils.src" value="${utils.home}/src"/>
	<property name="utils.build" value="${utils.home}/build"/>
	<property name="utils.build.classes" value="${utils.build}/classes"/>
	<property name="utils.jar" value="${utils.build}/utils.jar"/>

	<property name="entitylib.home" value="EntityLib"/>
	<property name="entitylib.src" value="${entitylib.home}/src"/>
	<property name="entitylib.build" value="${entitylib.home}/build"/>
	<property name="entitylib.build.classes" value="${entitylib.build}/classes"/>
	<property name="entitylib.jar" value="${entitylib.build}/entitylib.jar"/>

	<property name="workflow.home" value="Workflow"/>
	<property name="workflow.src" value="${workflow.home}/src"/>
	<property name="workflow.build" value="${workflow.home}/build"/>
	<property name="workflow.build.classes" value="${workflow.build}/classes"/>
	<property name="workflow.jar" value="${workflow.build}/workflow.jar"/>

	<property name="server.home" value="Server"/>
	<property name="src.home" value="${server.home}/src"/>
	<property name="build.home" value="${server.home}/build"/>
	<property name="web.home" value="${server.home}/web"/>
	<property name="dist.home" value="${server.home}/dist"/>
	<property name="docs.home" value="${server.home}/docs"/>
		
	<path id="cinnamon.classpath">
	 	<fileset dir="${lib.commons.httpclient.home}" includes="commons-httpclient-3.1.jar" />
	  	<fileset dir="${lib.commons.fileupload.path}" includes="*.jar"/>
	    <fileset dir="${lib.commons.io.home}" includes="*.jar"/>
	
		<fileset dir="${servlet_api.home}" includes="servlet-api*.jar"/>
		
	  	<!-- include previously generated support libs: -->
		<fileset dir="${server.home}/lib" includes="*.jar"/>
		
		<fileset dir="${hibernate.home}" includes="*.jar"/>
	  	<fileset dir="${hibernate.annotations.home}" includes="*.jar"/>
	    <fileset dir="${hibernate.annotations.lib}" includes="*.jar"/>
	</path>

	<!-- - - - - - - - - - - - - - - - - - 
          target: prepare                      
         - - - - - - - - - - - - - - - - - -->
	<!--

	  The "prepare" target is used to create the "build" destination directory,
	  and copy the static contents of your web application to it.  If you need
	  to copy static files from external dependencies, you can customize the
	  contents of this task.

	  Normally, this task is executed indirectly when needed.

	-->
    <target name="prepare">
		<mkdir dir="${utils.build}"/>
    	<mkdir dir="${utils.build.classes}"/>

		<mkdir dir="${entitylib.build}"/>
    	<mkdir dir="${entitylib.build.classes}"/>

		<mkdir dir="${workflow.build}"/>
    	<mkdir dir="${workflow.build.classes}"/>
    	
    	<mkdir dir="${safran.build}"/>
    	<mkdir dir="${safran.build.classes}"/>
    	
		<!-- Create build directories as needed -->
    	<mkdir dir="${build.home}"/>
        <mkdir dir="${build.home}/META-INF"/>
        <mkdir dir="${build.home}/WEB-INF"/>
        <mkdir dir="${build.home}/WEB-INF/classes"/>
    	
        <!-- Copy static content of this web application -->
    	<!-- currently not needed.
        <copy todir="${build.home}">
          <fileset dir="${web.home}"/>
        </copy>
        -->

        <!-- Copy external dependencies as required -->
      	<mkdir dir="${build.home}/WEB-INF/classes/META-INF"/>
    	<copy todir="${build.home}/WEB-INF/classes/META-INF">
         		<fileset dir="${server.home}/META-INF/">
        			<include name="persistence.postgres.xml"/>
    			</fileset>
         		<mapper type="glob" from="persistence.postgres.xml" to="persistence.xml"/>
        	</copy>
     	<copy todir="${build.home}/WEB-INF/classes" file="${server.home}/logback-test.xml"/>

     	<mkdir  dir="${build.home}/WEB-INF/lib"/>   	
    	<copy todir="${build.home}/WEB-INF/lib" file="${lib.commons.fileupload}"/>
      	<copy todir="${build.home}/WEB-INF/lib" file="${lib.commons.io}"/>
      	<copy todir="${build.home}/WEB-INF/lib" file="${lib.commons.httpclient}"/>    	    	
		<copy todir="${build.home}/WEB-INF/lib" file="${lib.commons.collections}"/>
    	<copy todir="${build.home}/WEB-INF/lib" file="${lib.commons.codec}"/>
		<copy todir="${build.home}/WEB-INF/lib" file="${lib.commons.logging}"/> <!-- needed by httpclient -->
    	<copy todir="${build.home}/WEB-INF/lib" file="${lib.jaxen}"/> <!-- needed by dom4j -->
		<copy todir="${build.home}/WEB-INF/lib" file="${lib.xstream}"/>
		<copy todir="${build.home}/WEB-INF/lib" file="${lib.xpp3}"/>
    	<copy todir="${build.home}/WEB-INF/lib" file="${lib.lucene}"/>
    	<copy todir="${build.home}/WEB-INF/lib" file="${lib.lucene.xmlquery}"/>
    	
     	<copy todir="${build.home}/WEB-INF/lib" file="${hibernate.home}/hibernate3.jar"/>
      	<copy todir="${build.home}/WEB-INF/lib" file="${hibernate.annotations.home}/hibernate-annotations.jar"/>
    	<copy todir="${build.home}/WEB-INF/lib" file="${hibernate.entitymanager.home}/hibernate-entitymanager.jar"/>
		
    	<copy todir="${build.home}/WEB-INF/lib" file="${lib.slf4j.api}"/>
    	<copy todir="${build.home}/WEB-INF/lib" file="${lib.logback.core}"/>
    	<copy todir="${build.home}/WEB-INF/lib" file="${lib.logback.classic}"/>
    	<copy todir="${build.home}/WEB-INF/lib" file="${lib.c3p0}"/>

    	<copy todir="${build.home}/WEB-INF/lib">
    	    <fileset dir="${hibernate.lib.required}"
    	    	includes="*.jar"
    	    	excludes="commons-collections*.jar"
    	    />
    	    <fileset dir="${hibernate.annotations.lib}" includes="*.jar"/>
    	    <fileset dir="${hibernate.entitymanager.home}/lib" includes="*.jar"/>
      	</copy>
    	
    	<copy todir="${workflow.build}/classes/lib" file="${lib.commons.httpclient}"/>
    </target>
	
	<!-- ================================= 
          target: all              
         ================================= -->
    <target name="all" depends="clean, compile" description="Clean build and dist directories, then compile"/>
	
	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" description="Delete old build and dist directories">
		<delete dir="${utils.build}" />
		<delete dir="${entitylib.build}" />
		<delete dir="${workflow.build}" />
	    <delete dir="${build.home}" />
	    <delete dir="${dist.home}" />
		<delete dir="${safran.build}"/>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
	         target: compile.safran                      
	        - - - - - - - - - - - - - - - - - -->
	<target name="compile.safran" depends="compile" description="compile the Safran client lib">
	        <javac srcdir="${safran.src}"
	         destdir="${safran.build.classes}"
	         debug="${compile.debug}"
	        	>
	        	<classpath>
	        		<path refid="compile.classpath"/>
	        		<pathelement location="${utils.jar}"/>
	            	<pathelement location="${entitylib.jar}"/>
	            	<pathelement location="${workflow.jar}"/>
	        	</classpath>
		  	</javac>

	    	<mkdir dir="${safran.build.classes}/META-INF"/>
			<copy todir="${safran.build.classes}/META-INF">
		     		<fileset dir="${server.home}/META-INF/">
		    			<include name="persistence.postgres.xml"/>
					</fileset>
		     		<mapper type="glob" from="persistence.postgres.xml" to="persistence.xml"/>
		   	</copy>
		
	    	<copy todir="${safran.build.classes}" file="${safran.home}/test/testng.xml"/>
        	<copy todir="${safran.build.classes}" file="${safran.home}/config.properties"/>
        	<copy todir="${build.home}/WEB-INF/lib" file="${lib.postgres}"/>

		<jar destfile="${safran.jar}" basedir="${safran.build.classes}">
	    		<zipgroupfileset dir="${build.home}/WEB-INF/lib" includes="*.jar"
	    			excludes="**/slf4j-api-1.5.2* **/slf4j-api.jar **/javassist.jar **/dom4j.jar **/jta.jar"
	    			/>
	    		<include name="**/*.class"/>
	    		<include name="**/META-INF/*.xml"/>
				<include name="**/testng.xml"/>
                <include name="**/*.properties"/>

	    		<manifest>
	    			<attribute name="Main-Class" value="safran.Client" />
	    		</manifest>
	  		</jar>
	    </target>	
		
	<!-- - - - - - - - - - - - - - - - - - 
          target: compile.utils                      
         - - - - - - - - - - - - - - - - - -->
    <target name="compile.utils" description="compile the Cinnamon utility lib">
        <javac srcdir="${utils.src}"
         destdir="${utils.build.classes}"
         debug="${compile.debug}">
        	<classpath refid="compile.classpath"/>
	  	</javac>
    	<!-- <jar destfile="${utils.jar}" basedir="${utils.build.classes}" includes="**/*.class"/> -->

    	<mkdir dir="${utils.build.classes}/META-INF"/>
		<copy todir="${utils.build.classes}/META-INF">
	     		<fileset dir="${server.home}/META-INF/">
	    			<include name="persistence.postgres.xml"/>
				</fileset>
	     		<mapper type="glob" from="persistence.postgres.xml" to="persistence.xml"/>
	   	</copy>
    	
    	<jar destfile="${utils.jar}" basedir="${utils.build.classes}">
    		<include name="**/*.class"/>
    		<include name="**/META-INF/*.xml"/>
  		</jar>
    	<copy todir="${server.home}/lib" file="${utils.jar}"/>
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: compile.entitylib                      
         - - - - - - - - - - - - - - - - - -->
    <target name="compile.entitylib" description="compile the entitylib">
    	<!-- Compile package EntityLib -->
        <javac srcdir="${entitylib.src}"
         destdir="${entitylib.build.classes}"
         debug="${compile.debug}">
        	<classpath>
        		<path refid="compile.classpath"/>
        		<pathelement location="${utils.jar}"/>
       		</classpath>
	  	</javac>
    	<!-- <jar destfile="${entitylib.jar}" basedir="${entitylib.build.classes}" includes="**/*.class"/> -->

    	<mkdir dir="${entitylib.build.classes}/META-INF"/>
		<copy todir="${entitylib.build.classes}/META-INF">
	     		<fileset dir="${server.home}/META-INF/">
	    			<include name="persistence.postgres.xml"/>
				</fileset>
	     		<mapper type="glob" from="persistence.postgres.xml" to="persistence.xml"/>
	   	</copy>
    	
    	<jar destfile="${entitylib.jar}" basedir="${entitylib.build.classes}">
    		<include name="**/*.class"/>
    		<include name="**/META-INF/*.xml"/>
  		</jar>

  		<copy todir="${server.home}/lib" file="${entitylib.jar}"/>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: compile.workflow                      
         - - - - - - - - - - - - - - - - - -->
    <target name="compile.workflow" description="compile the workflow lib">
    	<!-- Compile package Workflow -->
        <javac srcdir="${workflow.src}"
         destdir="${workflow.build.classes}"
         debug="${compile.debug}">
        	<classpath>
        		<path refid="compile.classpath"/>
        		<pathelement location="${utils.jar}"/>
        		<pathelement location="${entitylib.jar}"/>
       		</classpath>
	  	</javac>
    	<!-- <jar destfile="${workflow.jar}" basedir="${workflow.build.classes}" includes="**/*.class"/> -->

    	<mkdir dir="${workflow.build.classes}/META-INF"/>
    	
    	<jar destfile="${workflow.jar}" basedir="${workflow.build}/classes">
    		<include name="**/*.class"/>
    		<include name="**/META-INF/*.xml"/>
    		<include name="**/lib/*.jar"/>
  		</jar>
 		<copy todir="${server.home}/lib" file="${workflow.jar}"/>

    </target>


	<!-- ================================= 
          target: javadoc              
         ================================= -->
	<!--

	  The "javadoc" target creates Javadoc API documentation for the Java
	  classes included in your application.  Normally, this is only required
	  when preparing a distribution release, but is available as a separate
	  target in case the developer wants to create Javadocs independently.

	-->
    <target name="javadoc" depends="compile" description="Create Javadoc API documentation">
        <mkdir dir="${docs.home}/docs/api"/>
    	<javadoc sourcepath="${src.home}" destdir="${docs.home}/docs/api" packagenames="*" private="true">
    		<classpath>
            	<path refid="compile.classpath"/>
            	<path refid="cinnamon.classpath"/>
        		<pathelement location="${utils.jar}"/>
        		<pathelement location="${entitylib.jar}"/>
        		<pathelement location="${workflow.jar}"/>
	   		</classpath>
        	<header><![CDATA[<a target="_top" href="http://sourceforge.net"><img src="http://sflogo.sourceforge.net/sflogo.php?group_id=196124&amp;type=2" width="125" height="37" border="0" alt="SourceForge.net_Logo" /></a>]]></header>
        	<bottom><![CDATA[Return to the <a target="_top" href="http://cinnamon.sf.net">cinnamon</a> content management system homepage]]></bottom>
    	</javadoc>
    </target>
	
	<!-- ================================= 
          target: compile
         ================================= -->
   <target name="compile" depends="prepare, compile.utils, compile.entitylib, compile.workflow" description="Compile Java sources">
        <!-- Compile Java classes as necessary -->
        <javac srcdir="${src.home}"
              destdir="${build.home}/WEB-INF/classes"
                debug="${compile.debug}">
            <classpath>
            	<path refid="compile.classpath"/>
            	<path refid="cinnamon.classpath"/>
        		<pathelement location="${utils.jar}"/>
        		<pathelement location="${entitylib.jar}"/>
        		<pathelement location="${workflow.jar}"/>
            </classpath>
        </javac>
    	
    	<!-- copy libs -->
    	<copy todir="${build.home}/WEB-INF/lib" file="${utils.jar}"/>
    	<copy todir="${build.home}/WEB-INF/lib" file="${entitylib.jar}"/>
    	<copy todir="${build.home}/WEB-INF/lib" file="${workflow.jar}"/>
    	
        <!-- Copy application resources -->
        <copy  todir="${build.home}/WEB-INF/classes">
          <fileset dir="${src.home}" excludes="**/*.java"/>     
        </copy>

      	<!-- copy web.xml usw. -->
      	 <copy  todir="${build.home}/WEB-INF"> 	
      	 	<fileset dir="${server.home}/WEB-INF/" includes="*.xml"/>
      	</copy>
    	 <copy  todir="${build.home}/META-INF"> 	
     	 	<fileset dir="${server.home}/META-INF/" includes="*.xml"/>
     	</copy>

    </target>
	

	<!-- ================================= 
          target: dist
         ================================= -->
	<!--

	  The "dist" target creates a binary distribution of your application
	  in a directory structure ready to be archived in a tar.gz or zip file.
	  Note that this target depends on two others:

	  * "compile" so that the entire web application (including external
	    dependencies) will have been assembled

//disabled - is only needed for public dist. * "javadoc" so that the application Javadocs will have been created

	-->
    <target name="dist" depends="compile" description="Create binary distribution">
        <!-- Copy documentation subdirectories -->
		<mkdir dir="${dist.home}/docs"/>
    	<copy todir="${dist.home}/docs">
    		<fileset dir="${docs.home}"/>
    	</copy>

        <!-- Create application JAR file -->
		<jar destfile="${dist.home}/${app.name}.war" basedir="${build.home}"
			excludes="**/slf4j-api-1.5.2* **/slf4j-api.jar **/javassist.jar **/dom4j.jar **/jta.jar"
			/>
    </target>
	
	<!-- ================================= 
          target: deploy              
         ================================= -->
    <target name="deploy" depends="dist" description="copy war file to webapps dir">
        <copy todir="${deploy.dir}" file="${dist.home}/${app.name}.war"></copy>
    </target>

</project>